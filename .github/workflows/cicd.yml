run-name: ${{ inputs.comment }} [${{ github.ref_name }} ref] ${{ inputs.application }} - ${{ inputs.environment }} by @${{ github.actor }}
name: Build, Push, Deploy
on:
  workflow_dispatch:
    inputs:
      application:
        description: 'Application for deploy'
        required: true
        default: web-application
        type: choice
        options:
        - web-application
      environment:
        type: environment
        required: true
        description: 'environment to deploy, for prod use workflow from tags'
        default: development
      comment:
        description: "comment"
        required: true
        default: "usefull information"
        type: string

defaults:
  run:
    working-directory: ./

env:
  PRODUCTION_NS: production
  DEVELOPMENT_NS: development
  DEFAULT_VERSION_CHART: 0.0.0

jobs:
  choose_enviroment:
    runs-on: 'ubuntu-latest'
    if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
    outputs:
      production_ns: ${{ steps.chosen_namespace.outputs.production }}
      development_ns: ${{ steps.chosen_namespace.outputs.development }}
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v3
    - 
      name: namespaces
      id: chosen_namespace
      run: |
        echo "production=${PRODUCTION_NS}" >> $GITHUB_OUTPUT
        echo "development=${DEVELOPMENT_NS}" >> $GITHUB_OUTPUT

  check_tags:
      runs-on: 'ubuntu-latest'
      if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
      needs:
      - choose_enviroment
      outputs:
        status: ${{ join(steps.*.conclusion) }}
      steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      -
        id: step_development
        name: Development
        if: ${{ inputs.environment == 'development' && github.ref_type != 'tag' }}
        run: |
          echo "Have no tags! Branch [${GITHUB_REF##*/}] would be deployed to development"
          exit 0
      -
        id: step_production
        name: Production
        if: ${{ inputs.environment == 'production' && github.ref_type == 'tag' }}
        run: |
          echo "Tagged version [${{ github.ref_name }}] would be deployed to production"
          exit 0
      - 
        name: Fail
        if: steps.step_development.conclusion == 'skipped' && steps.step_production.conclusion == 'skipped'
        run: |
          echo "Deploy failed! Production includes only tagged versions, development excludes tagged versions!"
          exit 1

  image_build_and_push:
      runs-on: 'ubuntu-latest'
      if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
      needs:
      - check_tags
      steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: harbor.quckoo.net
          username: ${{ secrets.HARBOR_LOGIN }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - 
        name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      - 
        name: Build and push Docker image [Development version]
        if: ${{ inputs.environment == 'development' && github.ref_type != 'tag' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            "SHA_COMMIT=${{ steps.short-sha.outputs.sha }}"
            "BRANCH_NAME=${{ github.ref_name }}"
          push: true
          tags: harbor.quckoo.net/education/educationtask-image/educationtask:${{ steps.short-sha.outputs.sha }}-dev, harbor.quckoo.net/education/educationtask-image/educationtask:latest-dev
      - 
        name: Build and push Docker image [Production version]
        if: ${{ inputs.environment == 'production' && github.ref_type == 'tag' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            "SHA_COMMIT=${{ steps.short-sha.outputs.sha }}"
            "VERSION_TAG=${{ github.ref_name }}"
          push: true
          tags: harbor.quckoo.net/education/educationtask-image/educationtask:${{ github.ref_name }}, harbor.quckoo.net/education/educationtask-image/educationtask:latest

  helm_prepare_and_push:
      runs-on: 'ubuntu-latest'
      if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
      needs:
      - image_build_and_push
      container:
        image: quay.io/roboll/helmfile:v0.142.0
      env:
        HELM_EXPERIMENTAL_OCI: 1
      steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7
      - 
        name: Lint Helm chart
        env:
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
        run: |
          APPLICATION_RAW_NAME=${{ github.event.repository.name }}
          APPLICATION_NAME=$(echo "$APPLICATION_RAW_NAME" | awk '{print tolower($0)}')
          echo "APPLICATION_NAME=${APPLICATION_NAME}" > $GITHUB_ENV
          sed -i "s/version\:.*/version\: ${DEFAULT_VERSION_CHART}-${SHORT_SHA}/" .helm/${APPLICATION_NAME}/Chart.yaml
          sed -i "s/appVersion\:.*/appVersion\: ${DEFAULT_VERSION_CHART}-${SHORT_SHA}/" .helm/${APPLICATION_NAME}/Chart.yaml
          helm lint ./.helm/${APPLICATION_NAME}
      - 
        name: Push Helm chart
        env:
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
        run: |
          helm registry login harbor.quckoo.net --username '${{ secrets.HARBOR_LOGIN }}' --password '${{ secrets.HARBOR_PASSWORD }}'
          helm package ./.helm/${APPLICATION_NAME}
          helm push ${APPLICATION_NAME}-${DEFAULT_VERSION_CHART}-${SHORT_SHA}.tgz oci://harbor.quckoo.net/education/${APPLICATION_NAME}-chart
          rm ${APPLICATION_NAME}-${DEFAULT_VERSION_CHART}-${SHORT_SHA}.tgz

  helm_install:
      runs-on: 'ubuntu-latest'
      if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
      needs:
      - helm_prepare_and_push
      container:
        image: quay.io/roboll/helmfile:v0.142.0
      env:
        HELM_EXPERIMENTAL_OCI: 1
      steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7
      - name: deploy
        env:
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
        run: |
          echo ${{ secrets.KUBE_CONFIG }} | base64 -d > ~/CONFIG
          export KUBECONFIG=~/CONFIG
          helmfile -f .helm/helmfile.yaml -e ${{ inputs.environment }} \
            --state-values-set \
              HARBOR_LOGIN=${{ secrets.HARBOR_LOGIN }}, \
              HARBOR_PASSWORD=${{ secrets.HARBOR_PASSWORD }}, \
              NS=jasper-${{ inputs.environment }}, \
              IMAGE_PULL_SECRET_CREDENTIALS_BASE64=${{ secrets.IMAGE_PULL_SECRET_CREDENTIALS_BASE64 }}, \
              SECRET_NAME='application', \
              CHART_TAG=${DEFAULT_VERSION_CHART}-${SHORT_SHA}, \
              IMAGE_TAG=${SHORT_SHA}-dev \
              apply
